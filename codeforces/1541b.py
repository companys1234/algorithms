# -*- coding: utf-8 -*-
"""1541B

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mmuY4h5WrmuH1LkWIwLhwFNDfM7pBFaZ
"""

import sys

def solve():
    input = sys.stdin.read
    data = input().split()
    idx = 0
    n = int(data[idx])
    idx += 1
    a = list(map(int, data[idx:idx + n]))
    idx += n

    freq = {}
    for num in a:
        freq[num] = freq.get(num, 0) + 1

    count = 0
    max_product = 2 * n

    # Precompute all possible x values
    unique_nums = sorted(freq.keys())

    for x in unique_nums:
        max_y = max_product // x
        for y in unique_nums:
            if y > max_y:
                break
            if x * y > max_product:
                continue
            if x == y:
                count += freq[x] * (freq[x] - 1) // 2
            elif x < y:  # To avoid double counting
                count += freq[x] * freq[y]

    print(count)

def main():
    input = sys.stdin.read
    data = input().split()
    idx = 0
    t = int(data[idx])
    idx += 1
    for _ in range(t):
        n = int(data[idx])
        idx += 1
        a = list(map(int, data[idx:idx + n]))
        idx += n

        freq = {}
        for num in a:
            freq[num] = freq.get(num, 0) + 1

        count = 0
        max_product = 2 * n

        unique_nums = sorted(freq.keys())

        for i, x in enumerate(unique_nums):
            max_y = max_product // x
            for y in unique_nums[i:]:  # Avoid duplicate pairs
                if y > max_y:
                    break
                if x * y > max_product:
                    continue
                if x == y:
                    count += freq[x] * (freq[x] - 1) // 2
                else:
                    count += freq[x] * freq[y]

        print(count)

if __name__ == "__main__":
    main()