# -*- coding: utf-8 -*-
"""276C

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uY9BSdxfYHRb8tWOfsNAOjTYLz_96nGs
"""

import sys

def solve():
    input = sys.stdin.read().split()
    ptr = 0
    n, q = map(int, input[ptr:ptr+2])
    ptr += 2
    a = list(map(int, input[ptr:ptr+n]))
    ptr += n

    # Массив для подсчета частот (1-based)
    freq = [0] * (n + 2)

    queries = []
    for _ in range(q):
        l, r = map(int, input[ptr:ptr+2])
        queries.append((l, r))
        ptr += 2
        freq[l] += 1
        if r + 1 <= n:
            freq[r+1] -= 1

    # Префиксные суммы для получения частот
    for i in range(1, n+1):
        freq[i] += freq[i-1]

    # Берем только значимые частоты (1..n)
    freq = freq[1:n+1]

    # Сортируем частоты и массив
    sorted_freq = sorted([(f, i) for i, f in enumerate(freq)], reverse=True)
    sorted_a = sorted(a, reverse=True)

    # Создаем новый массив с оптимальным распределением
    new_a = [0] * n
    for (f, idx), val in zip(sorted_freq, sorted_a):
        new_a[idx] = val

    # Префиксные суммы для быстрого ответа на запросы
    prefix = [0] * (n + 1)
    for i in range(n):
        prefix[i+1] = prefix[i] + new_a[i]

    # Считаем общую сумму
    total = 0
    for l, r in queries:
        total += prefix[r] - prefix[l-1]

    print(total)

solve()